

### File: ./..\simple_fuzzer\collect.py ###

import os

def collect_py_files_to_txt(root_dir: str, output_file: str):
    with open(output_file, 'w', encoding='utf-8') as out:
        for dirpath, _, filenames in os.walk(root_dir):
            for filename in filenames:
                if filename.endswith('.py'):
                    file_path = os.path.join(dirpath, filename)
                    out.write(f"\n\n### File: {file_path} ###\n\n")
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            out.write(f.read())
                    except Exception as e:
                        out.write(f"\n[Error reading {file_path}: {e}]\n")

    print(f"✅ 所有 Python 文件已写入到: {output_file}")

# 示例用法（你可以改成你项目根目录）
collect_py_files_to_txt('./..', 'all_code_output.txt')


### File: ./..\simple_fuzzer\main.py ###

import os
import time

from fuzzer.PathGreyBoxFuzzer import PathGreyBoxFuzzer
from runner.FunctionCoverageRunner import FunctionCoverageRunner
from schedule.PathPowerSchedule import PathPowerSchedule
from samples.Samples import sample1, sample2, sample3, sample4
from utils.ObjectUtils import dump_object, load_object


class Result:
    def __init__(self, coverage, crashes, start_time, end_time):
        self.covered_line = coverage
        self.crashes = crashes
        self.start_time = start_time
        self.end_time = end_time

    def __str__(self):
        return (
            f"Covered Lines: {self.covered_line}, "
            f"Crashes Num: {len(self.crashes)}, "
            f"Start Time: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(self.start_time))}, "
            f"End Time: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(self.end_time))}"
        )


if __name__ == "__main__":
    # 选择样例程序和对应的语料库
    sample_program = sample4
    corpus_path = "corpus/corpus_4"

    f_runner = FunctionCoverageRunner(sample_program)
    seeds = load_object(corpus_path)

    schedule = PathPowerSchedule(power=5)
    grey_fuzzer = PathGreyBoxFuzzer(seeds=seeds, schedule=schedule, is_print=True)

    start_time = time.time()
    grey_fuzzer.runs(f_runner, run_time=300)
    end_time = time.time()

    res = Result(
        coverage=grey_fuzzer.covered_line,
        crashes=set(grey_fuzzer.crash_map.values()),
        start_time=start_time,
        end_time=end_time,
    )

    output_dir = "_result"
    os.makedirs(output_dir, exist_ok=True)
    output_file = os.path.join(output_dir, "Sample-4.pkl")

    dump_object(output_file, res)
    print(load_object(output_file))


### File: ./..\simple_fuzzer\fuzzer\Fuzzer.py ###

import subprocess
import time
from typing import Tuple, List

from runner.Runner import Runner

Outcome = str


class Fuzzer:
    """Base class for fuzzers."""

    def __init__(self) -> None:
        """Constructor"""
        self.start_time = time.time()
        self.total_execs = 0
        self.last_print_time = self.start_time

    def fuzz(self) -> str:
        """Return fuzz input"""
        return ""

    def print_stats(self):
        pass

    def run(self, runner: Runner = Runner()) \
            -> Tuple[subprocess.CompletedProcess, Outcome]:
        """Run `runner` with fuzz input"""
        res = runner.run(self.fuzz())
        self.total_execs += 1
        if time.time() - self.last_print_time > 1:
            self.print_stats()
            self.last_print_time = time.time()
        return res

    def runs(self, runner: Runner = Runner(), run_time: int = 60) \
            -> List[Tuple[subprocess.CompletedProcess, Outcome]]:
        """Run `runner` with fuzz input, `trials` times"""
        res = list()
        while time.time() - self.start_time < run_time:
            res.append(self.run(runner))
        return res


### File: ./..\simple_fuzzer\fuzzer\GreyBoxFuzzer.py ###

import os
import time
from typing import List, Any, Tuple, Set

import random

from fuzzer.Fuzzer import Fuzzer
from runner.Runner import Runner
from utils.Coverage import Location
from utils.Mutator import Mutator
from runner.FunctionCoverageRunner import FunctionCoverageRunner
from schedule.PowerSchedule import PowerSchedule

from utils.Seed import Seed


class GreyBoxFuzzer(Fuzzer):

    def __init__(self, seeds: List[str], schedule: PowerSchedule, is_print: bool) -> None:
        """Constructor.
        `seeds` - a list of (input) strings to mutate.
        `mutator` - the mutator to apply.
        `schedule` - the power schedule to apply.
        """
        super().__init__()
        self.last_crash_time = self.start_time
        self.population = []
        self.file_map = {}
        self.covered_line: Set[Location] = set()
        self.seed_index = 0
        self.crash_map = dict()
        self.seeds = seeds
        self.mutator = Mutator()
        self.schedule = schedule
        if is_print:
            print("""
┌───────────────────────┬───────────────────────┬───────────────────┬────────────────┬───────────────────┐
│        Run Time       │    Last Uniq Crash    │    Total Execs    │  Uniq Crashes  │   Covered Lines   │
├───────────────────────┼───────────────────────┼───────────────────┼────────────────┼───────────────────┤""")


    def create_candidate(self) -> str:
        """Returns an input generated by fuzzing a seed in the population"""
        seed = self.schedule.choose(self.population)

        # Stacking: Apply multiple mutations to generate the candidate
        candidate = seed.data
        trials = min(len(candidate), 1 << random.randint(1, 5))
        for i in range(trials):
            candidate = self.mutator.mutate(candidate)
        return candidate

    def fuzz(self) -> str:
        """Returns first each seed once and then generates new inputs"""
        if self.seed_index < len(self.seeds):
            # Still seeding
            self.inp = self.seeds[self.seed_index]
            self.seed_index += 1
        else:
            # Mutating
            self.inp = self.create_candidate()

        return self.inp

    def print_stats(self):
        def format_seconds(seconds):
            hours = int(seconds) // 3600
            minutes = int(seconds % 3600) // 60
            remaining_seconds = int(seconds) % 60
            return f"{hours:02d}:{minutes:02d}:{remaining_seconds:02d}"

        template = """│{runtime}│{crash_time}│{total_exec}│{uniq_crash}│{covered_line}│
├───────────────────────┼───────────────────────┼───────────────────┼────────────────┼───────────────────┤"""

        template = template.format(runtime=format_seconds(time.time() - self.start_time).center(23),
                                   crash_time=format_seconds(self.last_crash_time - self.start_time).center(23),
                                   total_exec=str(self.total_execs).center(19),
                                   uniq_crash=str(len(set(self.crash_map.values()))).center(16),
                                   covered_line=str(len(self.covered_line)).center(19))
        print(template)

    def run(self, runner: FunctionCoverageRunner) -> Tuple[Any, str]:  # type: ignore
        """Run function(inp) while tracking coverage.
           If we reach new coverage,
           add inp to population and its coverage to population_coverage
        """
        result, outcome = super().run(runner)
        if len(self.covered_line) != len(runner.all_coverage):
            self.covered_line |= runner.all_coverage
            if outcome == Runner.PASS:
                # We have new coverage
                seed = Seed(self.inp, runner.coverage())
                self.population.append(seed)
        if outcome == Runner.FAIL:
            self.last_crash_time = time.time()
            self.crash_map[self.inp] = result

        return result, outcome


### File: ./..\simple_fuzzer\fuzzer\PathGreyBoxFuzzer.py ###

import time
from typing import List, Tuple, Any

from fuzzer.GreyBoxFuzzer import GreyBoxFuzzer
from schedule.PathPowerSchedule import PathPowerSchedule
from runner.FunctionCoverageRunner import FunctionCoverageRunner


class PathGreyBoxFuzzer(GreyBoxFuzzer):
    """基于路径频率的模糊测试器"""

    def __init__(self, seeds: List, schedule: PathPowerSchedule, is_print: bool):
        super().__init__(seeds, schedule, False)

        self.path_frequency = {}  # key: path_id, value: 执行次数
        self.last_new_path_time = self.start_time
        self.last_unique_crash_time = self.start_time
        self.is_print = is_print

        print("""
┌───────────────────────┬───────────────────────┬───────────────────────┬───────────────────┬───────────────────┬────────────────┬───────────────────┐
│        Run Time       │     Last New Path     │    Last Uniq Crash    │    Total Execs    │    Total Paths    │  Uniq Crashes  │   Covered Lines   │
├───────────────────────┼───────────────────────┼───────────────────────┼───────────────────┼───────────────────┼────────────────┼───────────────────┤""")

    def print_stats(self):
        def format_seconds(seconds):
            hours = int(seconds) // 3600
            minutes = int(seconds % 3600) // 60
            remaining_seconds = int(seconds) % 60
            return f"{hours:02d}:{minutes:02d}:{remaining_seconds:02d}"

        template = """│{runtime}│{path_time}│{crash_time}│{total_exec}│{total_path}│{uniq_crash}│{covered_line}│
├───────────────────────┼───────────────────────┼───────────────────────┼───────────────────┼───────────────────┼────────────────┼───────────────────┤"""
        template = template.format(
            runtime=format_seconds(time.time() - self.start_time).center(23),
            path_time=format_seconds(self.last_new_path_time - self.start_time).center(23),
            crash_time=format_seconds(self.last_unique_crash_time - self.start_time).center(23),
            total_exec=str(self.total_execs).center(19),
            total_path=str(len(self.path_frequency)).center(19),
            uniq_crash=str(len(set(self.crash_map.values()))).center(16),
            covered_line=str(len(self.covered_line)).center(19)
        )
        print(template)

    def run(self, runner: FunctionCoverageRunner) -> Tuple[Any, str]:
        """执行一次测试，并更新路径频率信息"""

        result, outcome = super().run(runner)

        # 假设 result 中含有路径ID属性
        path_id = getattr(result, 'path_id', None)
        if path_id is not None:
            if path_id not in self.path_frequency:
                self.path_frequency[path_id] = 0
                self.last_new_path_time = time.time()
            self.path_frequency[path_id] += 1

        # 更新调度器的路径频率
        if hasattr(self.schedule, 'update_path_frequency'):
            self.schedule.update_path_frequency(self.path_frequency)

        # 检测崩溃并更新时间戳
        if outcome == "crash":
            self.last_unique_crash_time = time.time()

        if self.is_print:
            self.print_stats()

        return result, outcome


### File: ./..\simple_fuzzer\fuzzer\__init__.py ###



### File: ./..\simple_fuzzer\runner\FunctionCoverageRunner.py ###

import hashlib
import traceback
from typing import Tuple, Callable, Set, Any, List

from runner.Runner import Runner
from utils.Coverage import Coverage, Location


class FunctionCoverageRunner(Runner):
    def __init__(self, function: Callable) -> None:
        """Initialize.  `function` is a function to be executed"""
        self._coverage = None
        self.function = function
        self.cumulative_coverage: List[int] = []
        self.all_coverage: Set[Location] = set()
        
    def run_function(self, inp: str) -> Any:
        with Coverage() as cov:
            try:
                result = self.function(inp)
            except Exception as exc:
                raise exc
            finally:
                self._coverage = cov.coverage()
                self.all_coverage |= cov.coverage()
                self.cumulative_coverage.append(len(self.all_coverage))

        return result

    def coverage(self) -> Set[Location]:
        return self._coverage
    
    def run(self, inp: str) -> Tuple[Any, str]:
        try:
            result = self.run_function(inp)
            outcome = self.PASS
        except Exception as exc:
            stack_trace = "".join(traceback.format_tb(exc.__traceback__))
            result = hashlib.md5(stack_trace.encode()).hexdigest()
            outcome = self.FAIL

        return result, outcome


### File: ./..\simple_fuzzer\runner\Runner.py ###

from typing import Any


class Runner:
    """Base class for testing inputs."""

    # Test outcomes
    PASS = "PASS"
    FAIL = "FAIL"
    UNRESOLVED = "UNRESOLVED"

    def __init__(self) -> None:
        """Initialize"""
        pass

    def run(self, inp: str) -> Any:
        """Run the runner with the given input"""
        print(inp)
        return inp, Runner.UNRESOLVED


### File: ./..\simple_fuzzer\runner\__init__.py ###



### File: ./..\simple_fuzzer\samples\Samples.py ###

import math
from html.parser import HTMLParser


def sample1(s: str):
    number = float(s)
    r1 = 1 - number
    r2 = r1 / number
    if r1 == r2:
        sample1(str(r2 + 1))
    elif r1 < r2:
        temp = s[(int(r2)) % 10].join(str(r1))
    else:
        temp = s[(int(r1)) % 10].join(str(r2))


def sample2(s: str):
    temp = """%d. {Key} is """
    r = s.split(".")
    temp += r[1]
    temp = temp.format(Key=r[0])
    temp = temp % len(s)

    def can_convert_to_int(s):
        try:
            int(s)
            return True
        except ValueError:
            return False

    if can_convert_to_int(r[0]):
        temp += str(math.sqrt(int(r[0])))


def sample3(s: str):
    if s[0] == 'F':
        if s[1] == 'D':
            if s[2] == 'U':
                t = (ord(s[4]) - 65) / (ord(s[3]) - 80)
                if t != 0:
                    index = s.index("L")
                    assert s[index + 1] == 'A'
                    if not s[index + 2:].startswith('B'):
                        raise RuntimeError


def sample4(s: str):
    parser = HTMLParser()
    parser.feed(s)


### File: ./..\simple_fuzzer\samples\__init__.py ###



### File: ./..\simple_fuzzer\schedule\PathPowerSchedule.py ###

from typing import Dict, Sequence
from schedule.PowerSchedule import PowerSchedule
from utils.Seed import Seed


class PathPowerSchedule(PowerSchedule):
    def __init__(self, power: float = 1.0) -> None:
        super().__init__()
        # 记录路径频率，key 为路径ID字符串，value 为频率
        self.path_frequency: Dict[str, int] = {}
        self.power = power  # 能量分配的指数权重

    def assign_energy(self, population: Sequence[Seed]) -> None:
        """
        为每个 Seed 分配能量，能量和路径频率的倒数成正比。
        频率越低，能量越大。使用指数调整差异大小。
        """
        # 重新统计路径频率
        self.path_frequency.clear()
        for seed in population:
            path_id = getattr(seed, "path_id", None)
            if path_id is None:
                # 如果 Seed 没有 path_id，可以考虑赋默认值或跳过
                continue
            self.path_frequency[path_id] = self.path_frequency.get(path_id, 0) + 1

        # 计算能量总和，用于归一化
        total_energy = 0.0
        energies = []
        for seed in population:
            freq = self.path_frequency.get(getattr(seed, "path_id", ""), 1)
            energy = (1.0 / freq) ** self.power  # 指数加权
            energies.append(energy)
            total_energy += energy

        # 分配归一化后的能量
        for seed, energy in zip(population, energies):
            seed.energy = energy / total_energy if total_energy > 0 else 0.0


### File: ./..\simple_fuzzer\schedule\PowerSchedule.py ###

import random
from typing import List

from utils.Seed import Seed

MAX_SEEDS = 1000


class PowerSchedule:

    def assign_energy(self, population: List[Seed]) -> None:
        """Assigns each seed the same energy"""
        for seed in population:
            seed.energy = 1

    def normalized_energy(self, population: List[Seed]) -> List[float]:
        """Normalize energy"""
        energy = list(map(lambda seed: seed.energy, population))
        sum_energy = sum(energy)  # Add up all values in energy
        assert sum_energy != 0
        norm_energy = list(map(lambda nrg: nrg / sum_energy, energy))
        return norm_energy

    def choose(self, population: List[Seed]) -> Seed:
        """Choose weighted by normalized energy."""
        self.assign_energy(population)
        norm_energy = self.normalized_energy(population)
        if len(population) > MAX_SEEDS:
            min_index = norm_energy.index(min(norm_energy))
            del norm_energy[min_index]
            del population[min_index]
        seed: Seed = random.choices(population, weights=norm_energy)[0]
        return seed


### File: ./..\simple_fuzzer\schedule\RandomSchedule.py ###

import random
from typing import Sequence
from schedule.PowerSchedule import PowerSchedule
from utils.Seed import Seed


class RandomSchedule(PowerSchedule):
    def __init__(self) -> None:
        super().__init__()

    def assign_energy(self, population: Sequence[Seed]) -> None:
        """随机调度，每个 Seed 能量均等分配"""
        if not population:
            return
        # 平均分配能量
        energy = 1.0 / len(population)
        for seed in population:
            seed.energy = energy

    def choose_seed(self, population: Sequence[Seed]) -> Seed:
        """随机选择一个 Seed"""
        if not population:
            raise ValueError("Population is empty")
        return random.choice(population)


### File: ./..\simple_fuzzer\schedule\__init__.py ###



### File: ./..\simple_fuzzer\utils\Coverage.py ###

import importlib
from typing import Any, Optional, Callable, List, Type, Set, Tuple
from types import FrameType, TracebackType

import sys
import inspect

Location = Tuple[str, int]


def import_all_functions_from_module(module_name):
    module = importlib.import_module(module_name)
    for name, obj in inspect.getmembers(module, inspect.isfunction):
        globals()[name] = obj


import_all_functions_from_module("samples.Samples")


class Coverage:

    def __init__(self) -> None:
        """Constructor"""
        self._trace: List[Location] = []

    # Trace function
    def traceit(self, frame: FrameType, event: str, arg: Any) -> Optional[Callable]:
        """Tracing function. To be overloaded in subclasses."""
        if self.original_trace_function is not None:
            self.original_trace_function(frame, event, arg)

        if event == "line":
            function_name = frame.f_code.co_name
            lineno = frame.f_lineno
            if function_name != '__exit__':  # avoid tracing ourselves:
                self._trace.append((function_name, lineno))

        return self.traceit

    def __enter__(self) -> Any:
        """Start of `with` block. Turn on tracing."""
        self.original_trace_function = sys.gettrace()
        sys.settrace(self.traceit)
        return self

    def __exit__(self, exc_type: Type, exc_value: BaseException,
                 tb: TracebackType) -> Optional[bool]:
        """End of `with` block. Turn off tracing."""
        sys.settrace(self.original_trace_function)
        return None  # default: pass all exceptions

    def trace(self) -> List[Location]:
        """The list of executed lines, as (function_name, line_number) pairs"""
        return self._trace

    def coverage(self) -> Set[Location]:
        """The set of executed lines, as (function_name, line_number) pairs"""
        return set(self.trace())

    def function_names(self) -> Set[str]:
        """The set of function names seen"""
        return set(function_name for (function_name, line_number) in self.coverage())

    def __repr__(self) -> str:
        """Return a string representation of this object.
           Show covered (and uncovered) program code"""
        t = ""
        for function_name in self.function_names():
            # Similar code as in the example above
            try:
                fun = eval(function_name)
            except Exception as exc:
                t += f"Skipping {function_name}: {exc}"
                continue

            source_lines, start_line_number = inspect.getsourcelines(fun)
            for lineno in range(start_line_number, start_line_number + len(source_lines)):
                if (function_name, lineno) not in self.trace():
                    t += "# "
                else:
                    t += "  "
                t += "%2d  " % lineno
                t += source_lines[lineno - start_line_number]

        return t


def population_coverage(population: List[str], function: Callable) \
        -> Tuple[Set[Location], List[int]]:
    cumulative_coverage: List[int] = []
    all_coverage: Set[Location] = set()

    for s in population:
        with Coverage() as cov:
            try:
                function(s)
            except:
                pass
        all_coverage |= cov.coverage()
        cumulative_coverage.append(len(all_coverage))

    return all_coverage, cumulative_coverage


### File: ./..\simple_fuzzer\utils\Mutator.py ###

import math
import random
import struct
from typing import Any, Callable, Tuple


def insert_random_character(s: str) -> str:
    b = bytearray(s.encode('utf-8', errors='ignore'))
    pos = random.randint(0, len(b))
    b.insert(pos, random.randint(32, 127))
    return b.decode('utf-8', errors='ignore')


def flip_random_bits(s: str) -> str:
    b = bytearray(s.encode('utf-8', errors='ignore'))
    N = random.choice([1, 2, 4])
    bit_len = len(b) * 8
    if bit_len < N:
        return s
    bit_pos = random.randint(0, bit_len - N)
    for i in range(N):
        byte_idx = (bit_pos + i) // 8
        bit_idx = (bit_pos + i) % 8
        b[byte_idx] ^= (1 << bit_idx)
    return b.decode('utf-8', errors='ignore')


def arithmetic_random_bytes(s: str) -> str:
    b = bytearray(s.encode('utf-8', errors='ignore'))
    N = random.choice([1, 2, 4])
    if len(b) < N:
        return s
    pos = random.randint(0, len(b) - N)
    for i in range(N):
        delta = random.randint(-35, 35)
        b[pos + i] = (b[pos + i] + delta) % 256
    return b.decode('utf-8', errors='ignore')


def interesting_random_bytes(s: str) -> str:
    interesting_1 = [0, 1, 255, 127]
    interesting_2 = [0, 1, 255, 256, 32767, 65535]
    interesting_4 = [0, 1, 255, 4294967295]

    b = bytearray(s.encode('utf-8', errors='ignore'))
    N = random.choice([1, 2, 4])
    if len(b) < N:
        return s
    pos = random.randint(0, len(b) - N)
    if N == 1:
        val = random.choice(interesting_1)
        b[pos] = val % 256
    elif N == 2:
        val = random.choice(interesting_2)
        val_bytes = val.to_bytes(2, byteorder='little', signed=False)
        b[pos:pos+2] = val_bytes
    else:
        val = random.choice(interesting_4)
        val_bytes = val.to_bytes(4, byteorder='little', signed=False)
        b[pos:pos+4] = val_bytes
    return b.decode('utf-8', errors='ignore')


def delete_random_character(s: str) -> str:
    """
    删除 s 中的一个随机 byte，避免删除多字节字符的一部分导致乱码。
    """
    b = bytearray(s.encode('utf-8', errors='ignore'))
    if len(b) == 0:
        return s
    pos = random.randint(0, len(b) - 1)
    del b[pos]
    return b.decode('utf-8', errors='ignore')


def havoc_random_insert(s: str) -> str:
    b = bytearray(s.encode('utf-8', errors='ignore'))
    pos = random.randint(0, len(b))
    if random.random() < 0.75 and len(b) > 0:
        start = random.randint(0, len(b) - 1)
        end = random.randint(start, len(b))
        segment = b[start:end]
    else:
        segment = bytearray(random.randint(1, 10))
        for i in range(len(segment)):
            segment[i] = random.randint(32, 127)
    b[pos:pos] = segment
    return b.decode('utf-8', errors='ignore')


def havoc_random_replace(s: str) -> str:
    b = bytearray(s.encode('utf-8', errors='ignore'))
    if len(b) == 0:
        return s
    start = random.randint(0, len(b) - 1)
    max_len = len(b) - start
    replace_len = random.randint(1, min(10, max_len))
    if random.random() < 0.75 and len(b) > 1:
        src_start = random.randint(0, len(b) - 1)
        src_end = random.randint(src_start, len(b))
        segment = b[src_start:src_end]
    else:
        segment = bytearray(random.randint(1, replace_len))
        for i in range(len(segment)):
            segment[i] = random.randint(32, 127)
    b[start:start+replace_len] = segment[:replace_len]
    return b.decode('utf-8', errors='ignore')


class Mutator:

    def __init__(self) -> None:
        """Constructor"""
        self.mutators = [
            insert_random_character,
            flip_random_bits,
            arithmetic_random_bytes,
            interesting_random_bytes,
            havoc_random_insert,
            havoc_random_replace,
            delete_random_character  # 新增的 Mutator
        ]

    def mutate(self, inp: Any) -> Tuple[str, str]:
        mutator = random.choice(self.mutators)
        return mutator(inp)


def test_mutator():
    mutator = Mutator()
    test_inputs = [
        "hello world!",         # 英文
        "你好，世界！",           # 中文
        "测试 test 123",        # 中英文混合
        "",                     # 空字符串
        "特殊字符：★☆♥♦♣♠",    # 特殊字符
    ]

    for i, inp in enumerate(test_inputs):
        print(f"\nTest case {i + 1}: 原始输入 -> {repr(inp)}")
        for _ in range(5):
            mutated = mutator.mutate(inp)
            print(f"  -> 变异结果: {repr(mutated)} ")


if __name__ == '__main__':
    test_mutator()


### File: ./..\simple_fuzzer\utils\ObjectUtils.py ###

import hashlib
import pickle


def dump_object(path: str, data):
    with open(path, 'wb') as f:
        pickle.dump(data, f)


def load_object(path: str):
    with open(path, 'rb') as f:
        return pickle.load(f)


def get_md5_of_object(obj):
    serialized_obj = pickle.dumps(obj)
    md5_hash = hashlib.md5()
    md5_hash.update(serialized_obj)
    return md5_hash.hexdigest()


### File: ./..\simple_fuzzer\utils\Seed.py ###

from typing import Set
from utils.Coverage import Location

class Seed:
    """Represent an input with additional attributes"""

    def __init__(self, data: str, _coverage: Set[Location], path_id: str = "") -> None:
        """Initialize from seed data"""
        self.data = data
        self.coverage: Set[Location] = _coverage
        self.energy = 0.0
        self.path_id = path_id  # 新增路径ID属性

    def __str__(self) -> str:
        """Returns data as string representation of the seed"""
        return self.data

    __repr__ = __str__


### File: ./..\simple_fuzzer\utils\__init__.py ###

